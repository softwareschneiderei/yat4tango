//----------------------------------------------------------------------------
// Copyright (c) 2004-2015 Synchrotron SOLEIL
// All rights reserved. This program and the accompanying materials
// are made available under the terms of the GNU Lesser Public License v3
// which accompanies this distribution, and is available at
// http://www.gnu.org/licenses/lgpl.html
//----------------------------------------------------------------------------
/*----- PROTECTED REGION ID(AttributesForwarder.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        AttributesForwarder.cpp
//
// description : C++ source for the AttributesForwarder and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               AttributesForwarder are implemented in this file.
//
// project :     AttributesForwarder.
//
// $Author:  N.Leclercq - SOLEIL
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL:  $
//
// CVS only:
// $Source:  $
// $Log:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <AttributesForwarder.h>
#include <AttributesForwarderClass.h>
#include <yat/utils/StringTokenizer.h>
#include <yat4tango/InnerAppender.h>
#include <yat4tango/ExceptionHelper.h>

/*----- PROTECTED REGION END -----*/


/**
 *	AttributesForwarder class description:
 *	Forwards the attributes specified by the ForwardedAttributes property.
 *	Each forwarded attribute becomes a local dynamic attribute of the AttributesForwarder device.
 *	ForwardedAttributes property is an array of strings (one entry per attribute to forward).
 *	Each entry should at least contains the fully qualified name of the attribute to be forwarded.
 *	An optional 'local attribute name' can also be specified in case you need/want to change the name under which the attribute is forwarded.
 *	Each ForwardedAttributes entry must have the following syntax: [tdb-host:tdb-port/]the/dev/name/attr-name[::attr-local-name].
 *
 */

//================================================================
//
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//----------------------------------------------------------------
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//================================================================

namespace AttributesForwarder_ns
{
	/*----- PROTECTED REGION ID(AttributesForwarder::namespace_starting) ENABLED START -----*/

	//	static initializations

	/*----- PROTECTED REGION END -----*/	//	AttributesForwarder::namespace_starting



//--------------------------------------------------------
/**
 *	Method      : AttributesForwarder::AttributesForwarder()
 *	Description : Constructors for a Tango device
 *	              implementing the class AttributesForwarder
 */
//--------------------------------------------------------
AttributesForwarder::AttributesForwarder(Tango::DeviceClass *cl, string &s)
 	: Tango::Device_4Impl(cl, s.c_str()), m_dam(this)
{
	/*----- PROTECTED REGION ID(AttributesForwarder::constructor_1) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	AttributesForwarder::constructor_1
}
//--------------------------------------------------------
AttributesForwarder::AttributesForwarder(Tango::DeviceClass *cl, const char *s)
 	: Tango::Device_4Impl(cl, s), m_dam(this)
{
	/*----- PROTECTED REGION ID(AttributesForwarder::constructor_2) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	AttributesForwarder::constructor_2
}
//--------------------------------------------------------
AttributesForwarder::AttributesForwarder(Tango::DeviceClass *cl, const char *s, const char *d)
 	: Tango::Device_4Impl(cl, s, d), m_dam(this)
{
	/*----- PROTECTED REGION ID(AttributesForwarder::constructor_3) ENABLED START -----*/

	init_device();

	/*----- PROTECTED REGION END -----*/	//	AttributesForwarder::constructor_3
}


//--------------------------------------------------------
/**
 *	Method      : AttributesForwarder::delete_device()()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void AttributesForwarder::delete_device()
{
	/*----- PROTECTED REGION ID(AttributesForwarder::delete_device) ENABLED START -----*/

  //- remove any dynamic or forwarded attr
  this->m_dam.remove_attributes();

  //- remove the inner appender
  yat4tango::InnerAppender::release(this);


	/*----- PROTECTED REGION END -----*/	//	AttributesForwarder::delete_devic
}


//--------------------------------------------------------
/**
 *	Method      : AttributesForwarder::init_device()
 *	Description : //	will be called at device initialization.
 */
//--------------------------------------------------------
void AttributesForwarder::init_device()
{
	/*----- PROTECTED REGION ID(AttributesForwarder::init_device_before) ENABLED START -----*/

   //- initialize the inner appender (first thing to do)
  try
  {
    yat4tango::InnerAppender::initialize(this, 512);
  }
  catch ( Tango::DevFailed& df )
  {
    std::string err("AttributesForwarder::init_device failed - could not instanciate the InnerAppender");
    ERROR_STREAM << err << std::endl;
    ERROR_STREAM << df << std::endl;
    this->set_state(Tango::FAULT);
    this->set_status(err);
    return;
  }

  //- trace/profile this method
  YAT4TANGO_TRACE("AttributesForwarder::init_device");

	//	Initialization before get_device_property() call
  this->forwardedAttributes.clear();

	/*----- PROTECTED REGION END -----*/	//	AttributesForwarder::init_device_before

	//	Get the device properties (if any) from database
	get_device_property();


	/*----- PROTECTED REGION ID(AttributesForwarder::init_device) ENABLED START -----*/

	//- be sure the <ForwardedAttributes> property is not empty
	if ( ! this->forwardedAttributes.size() )
  {
    std::string err("invalid configuration - the <ForwardedAttributes> property is either missing or empty");
    ERROR_STREAM << err << std::endl;
    this->set_state(Tango::FAULT);
    this->set_status(err);
    return;
  }

  //- parse the <ForwardedAttributes> property
  //- each entry has (or should have) the following syntax: [tdb-host:tdb-port/]the/dev/name/attr-name[::local name]

  //- fully qualified attribute names
  std::vector<yat4tango::ForwardedAttributeInfo> fai(forwardedAttributes.size());

  for ( size_t i = 0; i < forwardedAttributes.size(); i++)
  {
    //- string tokenizer
    yat::StringTokenizer st(forwardedAttributes[i], "::");
    //- populate the ForwardedAttributeInfo: associated device
    fai[i].dev = this;
    //- populate the ForwardedAttributeInfo: fully qualified attribute name
    fai[i].url = st.next_token();
    //- populate the ForwardedAttributeInfo: optional local attribute name
    fai[i].lan = st.has_more_tokens()
               ? st.next_token()
               : yat4tango::KeepOriginalAttributeName;
    INFO_STREAM << "forwarding attribute "
                << fai[i].url
                << (fai[i].lan == yat4tango::KeepOriginalAttributeName ? " keeping its orignal name" : " as ")
                << (fai[i].lan == yat4tango::KeepOriginalAttributeName ? "" : fai[i].lan )
                << std::endl;
  }

  //- forward the specified attributes
  try
  {
    this->m_dam.add_attributes(fai);
  }
  catch (Tango::DevFailed& df)
  {
    std::string err("failed to forward the specified attributes  - Tango exception caught - see log attribute for details");
    ERROR_STREAM << err << std::endl;
    ERROR_STREAM << df << std::endl;
    this->set_state(Tango::FAULT);
    this->set_status(err);
    return;
  }
  catch (...)
  {
    this->set_state(Tango::FAULT);
    this->set_status("failed to forward the specified attributes - unknown exception caught");
    return;
  }

  //- add some "pure" dynamic attributes
  try
  {
    for (size_t i = 0; i < 3; ++i)
    {
      yat4tango::DynamicAttributeInfo dai;
      dai.dev = this;
      switch (i)
      {
        case 0:
          //- initialize the associated data (here its a simple short)
          attr1_val = 10;
          //- specify the dyn. attr.  name
          dai.tai.name = "dynAttr1";
          //- associate the dyn. attr. with its data (see read_callback for usage)
          dai.set_user_data(&attr1_val);
          break;
        case 1:
          //- initialize the associated data (here its a simple short)
          attr2_val = 20;
          //- specify the dyn. attr.  name
          dai.tai.name = "dynAttr2";
          //- associate the dyn. attr. with its data (see read_callback for usage)
          dai.set_user_data(&attr2_val);
          break;
        case 2:
          //- initialize the associated data (here its a simple short)
          attr3_val = 30;
          //- specify the dyn. attr.  name
          dai.tai.name = "dynAttr3";
          //- associate the dyn. attr. with its data (see read_callback for usage)
          dai.set_user_data(&attr3_val);
          break;
        default:
          break;
      }
      //- describe the dyn attr we want...
      dai.tai.data_type = Tango::DEV_SHORT;
      dai.tai.data_format = Tango::SCALAR;
      dai.tai.writable = Tango::READ_WRITE;
      dai.tai.disp_level = Tango::OPERATOR;
      //- cleanup tango db option: cleanup tango db when removing this dyn. attr. (i.e. erase its properties fom db)
      dai.cdb = true;
      //- instanciate the read callback (called when the dyn. attr. is read)
      dai.rcb = yat4tango::DynamicAttributeReadCallback::instanciate(*this,
                                                                     &AttributesForwarder::read_callback);
      //- instanciate the write callback (called when the dyn. attr. is written)
      dai.wcb = yat4tango::DynamicAttributeWriteCallback::instanciate(*this,
                                                                      &AttributesForwarder::write_callback);
      //- log
      INFO_STREAM << "adding dyn. attribute "
                  << dai.tai.name
                  << std::endl;
      //- add the dyn. attr. to the device
      this->m_dam.add_attribute(dai);
    }
  }
  catch (Tango::DevFailed& df)
  {
    std::string err("failed to instanciate dynamic attributes  - Tango exception caught - see log attribute for details");
    ERROR_STREAM << err << std::endl;
    ERROR_STREAM << df << std::endl;
    this->set_state(Tango::FAULT);
    this->set_status(err);
    return;
  }
  catch (...)
  {
    this->set_state(Tango::FAULT);
    this->set_status("failed to instanciate dynamic attributes - unknown exception caught");
    return;
  }

  this->set_state(Tango::RUNNING);
  this->set_status( "forwarding attributes...");

  DEBUG_STREAM << "device successfully initialized" << std::endl;

	/*----- PROTECTED REGION END -----*/	//	AttributesForwarder::init_device
}

//----------------------------------------------------------------------------------------
// DYN. ATTRS. READ CALLBACK
//----------------------------------------------------------------------------------------
void AttributesForwarder::read_callback (yat4tango::DynamicAttributeReadCallbackData& cbd)
{
  //- be sure the pointer to the dyn. attr. is valid
  if ( ! cbd.dya )
  {
    THROW_DEVFAILED("INTERNAL_ERROR",
                    "unexpected NULL pointer to dynamic attribute",
                    "AttributesForwarder::read_callback");
  }

  //- log
  DEBUG_STREAM << "handling read request for dynamic attribute: "
               << cbd.dya->get_name()
               << std::endl;

  //- get access to the data associated with the dynamic attribute
  //- we choose to retreive it using the dyn. attr. "user data"
  Tango::DevShort * val = cbd.dya->get_user_data<Tango::DevShort>();

  //- be sure the pointer is valid
  if ( ! val )
  {
    TangoSys_OMemStream s;
    s << "unexpected NULL pointer to dynamic attribute data for "
      << cbd.dya->get_name();
    THROW_DEVFAILED("INTERNAL_ERROR", s.str().c_str(), "AttributesForwarder::read_callback");
  }

  //- change the attribute value (i.e. simulate some activity)
  (*val)++;

  //- set the attribute value
  cbd.tga->set_value(val);
}

//----------------------------------------------------------------------------------------
// DYN. ATTRS. WRITE CALLBACK
//----------------------------------------------------------------------------------------
void AttributesForwarder::write_callback (yat4tango::DynamicAttributeWriteCallbackData& cbd)
{
  //- be sure the pointer to the dyn. attr. is valid
  if ( ! cbd.dya )
  {
    THROW_DEVFAILED("INTERNAL_ERROR",
                    "unexpected NULL pointer to dynamic attribute",
                    "AttributesForwarder::write_callback");
  }

  //- log
  DEBUG_STREAM << "handling write request for dynamic attribute: "
               << cbd.dya->get_name()
               << std::endl;

  //- get access to the data associated with the dynamic attribute
  //- we choose to retreive it using the dyn. attr. "user data"
  Tango::DevShort * val = cbd.dya->get_user_data<Tango::DevShort>();

  //- be sure the pointer is valid
  if ( ! val )
  {
    TangoSys_OMemStream s;
    s << "unexpected NULL pointer to dynamic attribute data for "
      << cbd.dya->get_name();
    THROW_DEVFAILED("INTERNAL_ERROR", s.str().c_str(), "AttributesForwarder::write_callback");
  }

  //- get the attribute value
  cbd.tga->get_write_value(*val);
}

//--------------------------------------------------------
/**
 *	Method      : AttributesForwarder::get_device_property()
 *	Description : //	Add your own code to initialize
 */
//--------------------------------------------------------
void AttributesForwarder::get_device_property()
{
	/*----- PROTECTED REGION ID(AttributesForwarder::get_device_property_before) ENABLED START -----*/

	//	Initialize property data members

	/*----- PROTECTED REGION END -----*/	//	AttributesForwarder::get_device_property_before

	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("ForwardedAttributes"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);

		//	get instance on AttributesForwarderClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		AttributesForwarderClass	*ds_class =
			(static_cast<AttributesForwarderClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize ForwardedAttributes from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  forwardedAttributes;
		else {
			//	Try to initialize ForwardedAttributes from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  forwardedAttributes;
		}
		//	And try to extract ForwardedAttributes value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  forwardedAttributes;
	}
	/*----- PROTECTED REGION ID(AttributesForwarder::get_device_property_after) ENABLED START -----*/

	//	Check device property data members init

	/*----- PROTECTED REGION END -----*/	//	AttributesForwarder::get_device_property_after

}

//--------------------------------------------------------
/**
 *	Method      : AttributesForwarder::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void AttributesForwarder::always_executed_hook()
{
	/*----- PROTECTED REGION ID(AttributesForwarder::always_executed_hook) ENABLED START -----*/

	//	code always executed before all requests

	/*----- PROTECTED REGION END -----*/	//	AttributesForwarder::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : AttributesForwarder::AttributesForwarderClass::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *	              for specified device.
 */
//--------------------------------------------------------
void AttributesForwarder::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(AttributesForwarder::Class::add_dynamic_attributes) ENABLED START -----*/

	//	Add your own code to create and add dynamic attributes if any

	/*----- PROTECTED REGION END -----*/	//	AttributesForwarder::Class::add_dynamic_attributes

}

//========================================================
//	Command execution methods
//========================================================
	/*----- PROTECTED REGION ID(AttributesForwarder::namespace_ending) ENABLED START -----*/

	//	Additional Methods

	/*----- PROTECTED REGION END -----*/	//	AttributesForwarder::namespace_ending
} //	namespace

//----------------------------------------------------------------------------
// Copyright (c) 2004-2015 Synchrotron SOLEIL
// All rights reserved. This program and the accompanying materials
// are made available under the terms of the GNU Lesser Public License v3
// which accompanies this distribution, and is available at
// http://www.gnu.org/licenses/lgpl.html
//----------------------------------------------------------------------------
//=============================================================================
//
// file :        GroupManager.h
//
// description : Include for the GroupManager class.
//
// project :	Threaded device toolbox example
//
// $Author: leclercq $
//
// $Revision: 1.1 $
//
// $Log: GroupManager.h,v $
// Revision 1.1  2007/07/18 13:09:43  leclercq
// no message
//
// Revision 1.3  2007/07/18 13:02:50  leclercq
// Added a threaded device example
//
// Revision 1.1  2007/07/18 12:57:05  leclercq
// Added a threaded device example
//
//
// copyleft :    European Synchrotron Radiation Facility
//               BP 220, Grenoble 38043
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _GroupManager_H
#define _GroupManager_H

#include <tango.h>
#include <yat4tango/InnerAppender.h>
//using namespace Tango;
#include "GroupManagerTask.h"


/**
 * @author	$Author: leclercq $
 * @version	$Revision: 1.1 $
 */

 //	Add your own constants definitions here.
 //-----------------------------------------------

namespace GroupManager_ns
{

/**
 * Class Description:
 * Gives an example of a device threaded by inheritance
 */

/*
 *	Device States Description:
*  Tango::FAULT :    Initialization failed or runtime error
*  Tango::RUNNING :  Device is up and running
 */


class GroupManager: public Tango::Device_4Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attributs member data.
 */
//@{
		Tango::DevDouble	*attr_postThisDoubleToTheTask_read;
		Tango::DevDouble	attr_postThisDoubleToTheTask_write;
//@}

/**
 *	@name Device properties
 *	Device properties member data.
 */
//@{
/**
 *	
 */
	vector<string>	managedDevices;
/**
 *	
 */
	vector<string>	monitoredAttributes;
/**
 *	
 */
	vector<string>	excludedDevices;
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	GroupManager(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	GroupManager(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	GroupManager(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one desctructor is defined for this class */
//@{
/**
 * The object desctructor.
 */	
	~GroupManager() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method befor execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name GroupManager methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for postThisDoubleToTheTask acquisition result.
 */
	virtual void read_postThisDoubleToTheTask(Tango::Attribute &attr);
/**
 *	Write postThisDoubleToTheTask attribute values to hardware.
 */
	virtual void write_postThisDoubleToTheTask(Tango::WAttribute &attr);
/**
 *	Read/Write allowed for postThisDoubleToTheTask attribute.
 */
	virtual bool is_postThisDoubleToTheTask_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for Start command.
 */
	virtual bool is_Start_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Stop command.
 */
	virtual bool is_Stop_allowed(const CORBA::Any &any);
/**
 * Start periodic activity
 *	@exception DevFailed
 */
	void	start();
/**
 * Stop periodic activity
 *	@exception DevFailed
 */
	void	stop();

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	

protected :	
  //-------------------------------------------------------------
  //- about the dynamic attributes 
  //-------------------------------------------------------------
  //- any dymanic attribute must be added to the device interface 
  //- by the thread executing <init_device>. this is due to the
  //- Tango thread safety strategy. that's why we place all the
  //- the associated code into this Tango device class
  //-------------------------------------------------------------

  //- the device task
	GroupManagerTask * m_task;

  //- a double to store the "postThisValueToTheTask" attribute value
  double a_double;
};

}	// namespace_ns

#endif	// _GroupManager_H
